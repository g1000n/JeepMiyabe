import 'dart:convert';
import 'package:flutter/services.dart' show rootBundle;
// NOTE: google_maps_flutter and Color imports removed, as LatLng and Color
// are now handled by the factory constructors within the models themselves.

// Assuming these models exist in your lib directory
import 'graph_models.dart';

/// A utility class responsible for loading and deserializing the pre-processed
/// network graph data from the application's assets.
class DataLoader {
  /// The file path for the optimized network graph JSON, generated by the preprocessor.
  static const String _optimizedNetworkPath =
      'assets/data/optimized_network_graph.json';

  /// Loads the entire network graph (nodes and adjacency list) from the local asset.
  ///
  /// The returned data structure is immediately ready for use by pathfinding
  /// and visualization components.
  Future<JeepneyGraph> loadOptimizedNetwork() async {
    try {
      // 1. Load the JSON string from assets
      final String jsonString =
          await rootBundle.loadString(_optimizedNetworkPath);

      // 2. Decode the JSON string into a Map
      final Map<String, dynamic> decodedData = jsonDecode(jsonString);

      final Map<String, dynamic> rawNodes =
          decodedData['allNodes'] as Map<String, dynamic>;
      final Map<String, dynamic> rawAdjacencyList =
          decodedData['adjacencyList'] as Map<String, dynamic>;

      // --- Deserialization ---

      // 3. Deserialize all Node objects using the factory constructor from graph_models.dart
      final Map<String, Node> allNodes = rawNodes.map((id, data) {
        // Direct call to the factory constructor
        return MapEntry(id, Node.fromJson(data as Map<String, dynamic>));
      });

      // 4. Deserialize the Adjacency List (Edges) using the factory constructor
      final Map<String, List<Edge>> adjacencyList =
          rawAdjacencyList.map((nodeId, rawEdgesList) {
        final List<Edge> edges = (rawEdgesList as List<dynamic>).map((rawEdge) {
          // Direct call to the factory constructor
          return Edge.fromJson(rawEdge as Map<String, dynamic>);
        }).toList();

        return MapEntry(nodeId, edges);
      });

      // 5. Create and return the final JeepneyGraph object
      return JeepneyGraph(nodes: allNodes, adjacencyList: adjacencyList);
    } catch (e) {
      print(
          'ERROR: Failed to load or parse optimized network data from $_optimizedNetworkPath. Did you run the preprocessor?');
      print(e);
      // Return an empty graph on failure
      return JeepneyGraph(nodes: {}, adjacencyList: {});
    }
  }
}
